디자인 패턴이란?
	- 디자인 패턴이란 특정 문맥에서 공통적으로 발생하는 문제에 대해 쓰이는 재사용 가능한 해결책
	- 목적별로 일정한 패턴이 제시되어 있음
	- 완전한 정답이 되는 알고리즘과 달리 현재 상황에 맞춰 최적화된 패턴을 결정하여 사용하는것이 좋음
	- 대표적인 구체화된 디자인 패턴은 GoF(Gang of Four)에서 제시한 23개의 패턴

디자인 패턴의 장점
	- 개발자 간의 원활한 협업
	- 소프트웨어의 구조를 파악하기 용이
	- 재사용을 통해 개발 시간 단축
	- 설계 변경이 있을 경우 비교적 원활하게 조치 가능

디자인 패턴의 단점
	- 객체지향적 설계를 고려하여 진행해야 함
	- 초기 투자 비용이 많이 들어감 (돈 뿐만 아니라 시간, 이력 등)

생성 패턴
	- 객체의 생성과 관련
	- 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 최소화할 수 있도록 유연성 제공
	- 추상 팩토리, 빌더, 팩토리 메소드, 프로토타입, 싱글톤(*)
구조 패턴
	- 프로그램 내 자료 구조나 인터페이스 구조 등 프로그램 구조를 설계하는데 사용되는 패턴
	- 클래스나 객체를 조합하여 더 큰 구조를 만들 수 있게 해줌
	- 어댑터(*), 브리지(*), 컴포지트, 데코레이터(*), 파사드(*), 플라이웨이트, 프록시

행동 패턴
	- 반복적으로 사용되는 객체들의 커뮤니케이션을 패턴화
	- 객체 사이에 알고리즘 또는 책임을 분배하는 방법에 대해 정의
	- 결합도를 최소화 하는 것이 주 목적
	- 책임 연쇄, 커맨드, 인터프리터, 반복자, 중재자, 메멘토, 옵저버, 상태, 전략(*), 템플릿 메소드, 방문자

MVC 패턴 (Model View Controller)
	- 어플리케이션을 구성할 때 그 구성요소를 세가지 역할로 구분한 패턴
	- 사용자 인터페이스로부터 비즈니스 로직을 분리하여 서로 영향 없이 쉽게 고칠 수 있는 설계가 가능

 * 컨트롤러(Controller)
	- 모델(Model)과 뷰(View) 사이에서 브릿지 역할 수행
	- 앱의 사용자로부터 입력에 대한 응답으로 모델 및 뷰를 업데이트 하는 로직을 포함
	- 사용자의 요청은 모두 컨트롤러를 통해 진행
	- 컨트롤러로 들어온 요청은 처리방법을 결정하여 모델로 요청 전달

 * 모델(Model)
	- 데이터를 처리하는 영역
	- 데이터베이스와 연동을 위한 DAO와 데이터의 구조를 표현하는 DO로 구성

 * 뷰(View)
	- 데이터를 보여주는 화면 자체의 영역을 뜻함
	- 사용자 인터페이스 요소들이 여기에 포함되며, 데이터를 각 요소에 배치함
	- 뷰에서는 별도의 데이터를 보관하지 않음

MVC 패턴의 특징
	- 어플리케이션의 역할을 세 구간으로 나누어 설계함으로 서로 간의 의존성이 낮아짐
	- 각 영역이 독립적으로 구성되어 개발자 간 분업 및 협업이 원활해짐
	- 한 영역을 업데이트 하더라도 다른 곳에 영향을 주지 않음




