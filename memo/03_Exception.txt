예외 처리(Exception)

스프링 부트의 예외 처리 방식
	@ControllerAdvice를 통한 모든 Controller에서 발생할 수 있는 예외 처리
					모든 컨트롤러에서 발생할 예외를 정의
	@ExceptionHandler를 통한 특정 Controller의 예외 처리
					발생하는 예외 마다 처리할 메소드를 정의

예외 클래스
	모든 예외 클래스는 Throwable 클래스를 상속 받고 있음
	RuntimeException은 Unchecked Exception이며, 그 외 Exception은 Checked Exception으로 볼 수 있음

				Checked Exception				Unchecked Exception

처리여부			반드시 예외 처리 필요				명시적 처리 강제하지 않음

확인시점			컴파일 단계						실행 중 단계

예외발생시 트랜잭션	롤백하지 않음					롤백

대표 예외			IOException					NullPointerException
				SQLException					Illegal ArgumentException
											IndexOutOfBoundException
											SystemException

@ControllerAdvice, @RestControllerAdvice
@Controller나 @RestController에서 발생하는 예외를 한 곳에서 관리하고 처리할 수 있게 하는 어노테이션
	설정을 통해 범위 지정 가능, Default 값으로 모든 Controller에 대해 예외 처리를 관리
예외 발생 시 json의 형태로 결과를 반환하기 위해서는 @RestControllerAdvice를 사용

@ExceptionHandler
	예외 처리 상황이 발생하면 해당 Handler로 처리하겠다고 명시하는 어노테이션
	어노테이션 뒤에 괄호를 붙여 어떤 ExceptionClass를 처리할지 설정할 수 있음
		@ExceptionHandler(00Exception.class)
	Exception.class는 최상위 클래스로 하위 세부 예외 처리 클래스로 설정한 핸들러가 존재하면,
	그 핸들러가 우선 처리하게 되며, 처리 되지 못하는 예외처리에 대해 ExceptionClass에서 핸들링함
	@ControllerAdvice로 설정된 클래스 내에서 메소드로 정의할 수 있지만, 각 Controller안에 설정도 가능
	전역 설정(@ControllerAdvice)보다 지역 설정(Controller)으로 정의한 Handler가 우선순위를 가짐

HttpStatus (Enum Class)
	HttpStatus(value, series, reasonPhrase)
Custom Exception
	error type - HttpStatus의 reasonPhrase
	error code - HttpStatus의 value
	message - 상황별 디테일 Message

		



